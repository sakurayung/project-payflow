import React, { useState, useMemo } from "react";
import { useForm } from "@tanstack/react-form";
import { createFileRoute } from "@tanstack/react-router";
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";
import {
  useQuery,
  useMutation,
  useQueryClient,
  QueryClientProvider,
} from "@tanstack/react-query";
import { employeeApi } from "@/api/employee/route";
import type { EmployeeDTO, EmployeeFormValues } from "@/types";
import type { Employee } from "@/types";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { z } from "zod";
import { v4 as uuidv4 } from "uuid";

export const Route = createFileRoute("/employees-records")({
  component: EmployeesPage,
});

function EmployeesPage() {
  // const [employees, setEmployees] = useState<Employee[]>([]);
  const [editingEmployee, setEditingEmployee] = useState<EmployeeDTO | null>(
    null
  );

  // FETCH EMPLOYEES FROM API
 const {
  data: employees,
  isLoading,
  error,
} = useQuery({
  queryKey: ["employees"],
  queryFn: async () => {
    const result = await employeeApi.getAll();
    console.log("API Response:", result); // Add this to see the actual data
    return result;
  },
});
  

  // CREATE QUERY CLIENT
  const queryClient = useQueryClient();

  // CREATE EMPLOYEE MUTATION
  const createEmployeeMutation = useMutation({
    mutationFn: employeeApi.createEmployee,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["employees"] });
      setEditingEmployee(null);
    },
  });

  // UPDATE EMPLOYEE MUTATION
  const updateEmployeeMutation = useMutation({
    mutationFn: ({
      id,
      data,
    }: {
      id: number;
      data: Partial<EmployeeFormValues>;
    }) => employeeApi.updateEmployee(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["employees"] });
      setEditingEmployee(null);
    },
  });

  // DELETE CUSTOMER MUTATION
  const deleteEmployeeMutation = useMutation({
    mutationFn: employeeApi.deleteEmployee,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["employees"] });
    },
  });


  const columnHelper = createColumnHelper<Employee>();

  const columns = useMemo(
    () => [
      columnHelper.accessor("id", {
        header: "Employee's ID",
        cell: (info) => info.getValue(),
        size: 120,
      }),
      columnHelper.accessor("employeeName", {
        header: "Employee's Name",
        cell: (info) => info.getValue(),
        size: 150,
      }),
      columnHelper.accessor("major", {
        header: "Major",
        cell: (info) => info.getValue(),
        size: 120,
      }),
      columnHelper.accessor("degree", {
        header: "Degree",
        cell: (info) => info.getValue(),
        size: 120,
      }),
      columnHelper.accessor("workHours", {
        header: "Work Time",
        cell: (info) => info.getValue(),
        size: 120,
      }),
      columnHelper.accessor("units", {
        header: "Units",
        cell: (info) => info.getValue(),
        size: 100,
      }),
      columnHelper.accessor("monthlySalary", {
        header: "Monthly Salary",
        cell: (info) => {
          const value = info.getValue();
          return typeof value === "number"
            ? `${value.toLocaleString()}`
            : value;
        },
        size: 140,
      }),
    ],
    []
  );

  // Use employees from TanStack Query, fallback to empty array if undefined
  const table = useReactTable({
    data: employees ?? [],

    columns,
    getCoreRowModel: getCoreRowModel(),
  });
  
  const defaultEmployee: Employee = {
    id: "",
    employeeName: "",
    major: "",
    degree: "",
    units: 0,
    workHours: 0,
    monthlySalary: 0,
  };

  const form = useForm({
    defaultValues: defaultEmployee,
    onSubmit: async ({ value }: { value: Employee }) => {
      try {
        // Remove the id from the value since it should be generated by the backend
        const { id, ...employeeData } = value;
        await createEmployeeMutation.mutateAsync(employeeData);
        form.reset();
      } catch (error) {
        console.error("Failed to create employee:", error);
      }
    },
    validators: {
      onChange: z.object({
        id: z.string(),
        employeeName: z.string().min(3),
        major: z.string().min(3),
        degree: z.string().min(2),
        units: z.number().nonnegative(),
        workHours: z.number().nonnegative(),
        monthlySalary: z.number().nonnegative(),
      }),
    },
  });

  return (
    <div className="flex-1">
      <form
        onSubmit={(e) => {
          e.preventDefault();
          form.handleSubmit();
        }}
      >
        <form.Field
          name="employeeName"
          children={(field) => (
            <div className="flex flex-row gap-2 items-center">
              <label htmlFor={field.name}>Employee's Name</label>
              <Input
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
                className="w-[200px]"
              />
              {field.state.meta.errors.map((error, i) => (
                <p key={i} className="text-red-500">
                  {typeof error === "string" ? error : JSON.stringify(error)}

                </p>
              ))}
            </div>
          )}
        />
        <form.Field
          name="major"
          children={(field) => (
            <div className="flex flex-row gap-2 items-center">
              <label htmlFor={field.name}>Major</label>
              <Input
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
                className="w-[200px]"
              />
              {field.state.meta.errors.map((error, i) => (
                <p key={i} className="text-red-500">
                  {typeof error === "string" ? error : JSON.stringify(error)}

                </p>
              ))}
            </div>
          )}
        />
        <form.Field
          name="degree"
          children={(field) => (
            <div className="flex flex-row gap-2 items-center">
              <label htmlFor={field.name}>Degree</label>
              <Input
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
                className="w-[200px]"
              />
              {field.state.meta.errors.map((error, i) => (
                <p key={i} className="text-red-500">
                  {typeof error === "string" ? error : JSON.stringify(error)}

                </p>
              ))}
            </div>
          )}
        />
        <form.Field
          name="units"
          children={(field) => (
            <div className="flex flex-row gap-2 items-center">
              <label htmlFor={field.name}>Units</label>
              <Input
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(Number(e.target.value))}
                className="w-[200px]"
              />
              {field.state.meta.errors.map((error, i) => (
                <p key={i} className="text-red-500">
                  {typeof error === "string" ? error : JSON.stringify(error)}
                </p>
              ))}
            </div>
          )}
        />
        <form.Field

          name="workHours"

          children={(field) => (
            <div className="flex flex-row gap-2 items-center">
              <label htmlFor={field.name}>Work Time</label>
              <Input
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(Number(e.target.value))}
                className="w-[200px]"
              />
              {field.state.meta.errors.map((error, i) => (
                <p key={i} className="text-red-500">
                  {typeof error === "string" ? error : JSON.stringify(error)}
                </p>
              ))}
            </div>
          )}
        />
        <form.Field
          name="monthlySalary"
          children={(field) => (
            <div className="flex flex-row gap-2 items-center">
              <label htmlFor={field.name}>Monthly Salary</label>
              <Input
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(Number(e.target.value))}
                className="w-[200px]"
              />
              {field.state.meta.errors.map((error, i) => (
                <p key={i} className="text-red-500">
                  {typeof error === "string" ? error : JSON.stringify(error)}
                </p>
              ))}
            </div>
          )}
        />
        <Button>Submit</Button>
      </form>

      <div className="mt-8 bg-white rounded-xl overflow-hidden shadow-lg">
        {isLoading ? (
          <div className="p-8 text-center text-gray-500">Loading...</div>
        ) : error ? (
          <div className="p-8 text-center text-red-500">
            Error loading employees.
          </div>
        ) : (
          <table className="w-full">
            <thead className="bg-gray-200">
              <tr>
                <th className="px-4 py-3 text-left font-semibold text-gray-800">
                  Employee's ID
                </th>
                <th className="px-4 py-3 text-left font-semibold text-gray-800">
                  Employee's Name
                </th>
                <th className="px-4 py-3 text-left font-semibold text-gray-800">
                  Major
                </th>
                <th className="px-4 py-3 text-left font-semibold text-gray-800">
                  Degree
                </th>
                <th className="px-4 py-3 text-left font-semibold text-gray-800">
                  Work Time
                </th>
                <th className="px-4 py-3 text-left font-semibold text-gray-800">
                  Units
                </th>
                <th className="px-4 py-3 text-left font-semibold text-gray-800">
                  Monthly
                </th>
              </tr>
            </thead>
            <tbody>
              {(employees ?? []).length > 0 ? (
                (employees ?? []).map((employee: Employee, index: number) => (
                  <tr
                    key={employee.id ?? index}
                    className={index % 2 === 0 ? "bg-gray-50" : "bg-white"}
                  >
                    <td className="px-4 py-3 text-gray-800">{employee.id}
                    </td>
                    <td className="px-4 py-3 text-gray-800">
                      {employee.employeeName}
                    </td>
                    <td className="px-4 py-3 text-gray-800">
                      {employee.major}
                    </td>
                    <td className="px-4 py-3 text-gray-800">
                      {employee.degree}
                    </td>
                    <td className="px-4 py-3 text-gray-800">
                      {employee.workHours}
                    </td>
                    <td className="px-4 py-3 text-gray-800">
                      {employee.units}
                    </td>
                    <td className="px-4 py-3 text-gray-800">
                      {employee.monthlySalary}
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan={7}
                    className="px-4 py-8 text-center text-gray-500"
                  >
                    No employees added yet. Add your first employee using the
                    form above.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        )}

      </div>
    </div>
  );
}
